#ifndef GRAPHICS_H
#define GRAPHICS_H

/* clear_entity: Clears 'entity' from the screen.
 */
void clear_entity(struct game_data *game, struct pc *entity);

/* convert_iso: Convert from SDL coordinates to isometric coordinates.
 */
void convert_iso(struct pc *entity);

/* draw_entity: Animates and draws 'entity' of 'type' (defined in levels.h) on screen.
 */
void draw_entity(struct game_data *game, const int entity_type, struct pc *entity);

/* draw_level: Draws level generated by 'generate_level()'.
 */
void draw_level(struct game_data *game);

/* draw_text: Draws 'text' on 'screen' surface with offsets 'pos_x' and
 *            'pos_y' on the X and Y axis, respectively. Check the README
 *            file for documentation on how the font file is formatted.
 */
void draw_text(struct game_data *game, const char *text, int pos_x, int pos_y);

/* draw_tile: Draws tile 'tile_name' to 'dest' rect. Tile types are the
 *            same as defined in 'level.h'.
 */
void draw_tile(struct game_data *game, const int tile_type, SDL_Rect tile);

/* init_surface: Initializes and optimizes surface for rendering. Returns
 *               pointer to optimized SDL_Surface.
 */
SDL_Surface *init_surface(int width, int height);

/* load_graphics: Load graphics (level tiles, font, player and zombie animations)
 *                into memory for later use.
 */
void load_graphics(struct game_data *game);

/* load_image: Loads an image pointed to by 'filename', optimises it and
 *             returns a pointer to the resulting optimized image surface.
 */
SDL_Surface *load_image(const char *filename);

/* store_entity: Copies from 'game.world' surface to 'entity.bg' surface
 * 		 using 'entity' position and size as offsets.
 */
void store_entity(struct game_data *game, struct pc *entity);

/* update_text: Updates and redraws text on the screen.
 */
void update_text(struct game_data *game);

/* update_screen: Updates and redraws screen.
 */
void update_screen(struct game_data *game);

#endif
