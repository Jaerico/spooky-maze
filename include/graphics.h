#ifndef GRAPHICS_H
#define GRAPHICS_H

/* 
 * Clears 'entity' from the screen.
 */
void graphics_entity_clear(struct game_data *game, struct pc *entity);

/* 
 * Convert from SDL coordinates to isometric coordinates.
 */
void graphics_iso_convert(struct pc *entity);

/* 
 * Animates and draws 'entity' of 'type' (defined in levels.h) on screen.
 */
void graphics_entity_draw(struct game_data *game, const int entity_type, struct pc *entity);

/* 
 * Draws level generated by 'level_generate()'.
 */
void graphics_level_draw(struct game_data *game);

/* 
 * Draws 'text' on 'screen' surface with offsets 'pos_x' and 'pos_y' on the
 * X and Y axis, respectively. Check the README file for documentation on
 * how the font file is formatted.
 */
void graphics_text_draw(struct game_data *game, const char *text, int pos_x, int pos_y);

/* 
 * Draws tile 'tile_name' to 'dest' rect. Tile types are the same as
 * defined in 'level.h'.
 */
void graphics_tile_draw(struct game_data *game, const int tile_type, SDL_Rect tile);

/* 
 * Initializes and optimizes surface for rendering. Returns pointer to
 * optimized SDL_Surface.
 */
SDL_Surface *graphics_surface_init(int width, int height);

/* 
 * Load graphics (level tiles, font, player and zombie animations) into
 * memory for later use.
 */
void graphics_assets_load(struct game_data *game);

/* 
 * Loads an image pointed to by 'filename', optimises it and returns a
 * pointer to the resulting optimized image surface.
 */
SDL_Surface *graphics_image_load(const char *filename);

/* 
 * Copies from 'game.world' surface to 'entity.bg' surface using 'entity'
 * position and size as offsets.
 */
void graphics_entity_store(struct game_data *game, struct pc *entity);

/* 
 * Updates and redraws text on the screen.
 */
void graphics_text_update(struct game_data *game);

/* 
 * Updates and redraws screen.
 */
void graphics_screen_update(struct game_data *game);

#endif
